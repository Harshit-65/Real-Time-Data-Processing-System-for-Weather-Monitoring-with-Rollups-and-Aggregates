{"ast":null,"code":"var _jsxFileName = \"D:\\\\Leonidas\\\\Downloads\\\\project0-main\\\\project0-main\\\\frontend\\\\myapp\\\\src\\\\container\\\\WebApp.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import \"./WebApp.css\";\n// import bellIcon from \"../img/bell2.png\";\n// import ringingBellIcon from \"../img/bell_ring2.png\";\n// import WeatherAnalytics from \"../components/weatherAnalytics/weatherAnalytics\"\n// import axios from 'axios'\n\n// const Weather = () => {\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [location, setLocation] = useState('Delhi');\n//   const [inputLocation, setInputLocation] = useState(location);\n//   const [alert, setAlert] = useState(false);\n//   const [consecutiveAlerts, setConsecutiveAlerts] = useState(0);\n//   const [threshold] = useState(50); // Example threshold in Fahrenheit\n\n//   // useEffect(() => {\n//   //   const fetchWeather = async (loc) => {\n//   //     try {\n//   //       // Replace this with an actual API call\n//   //       // const response = await axios.get(\n//   //       //   `https://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${loc}`\n//   //       // );\n//   //       const response = data; // Mock data\n\n//   //       setWeatherData(response);\n//   //     } catch (error) {\n//   //       console.error(\"Error fetching weather data:\", error);\n//   //     }\n//   //   };\n\n//   //   fetchWeather(location);\n//   // }, [location]);\n\n//   useEffect(() => {\n//     const fetchWeather = async (loc) => {\n//       try {\n//         const response = await axios.post(\n//           'http://localhost:5000/current-weather', {\n//             city : loc\n//           }, {\n//             headers: {\n//               'Content-Type': 'application/json', // Specify the content type\n//               // 'Authorization': 'Bearer YOUR_TOKEN_HERE', // If your API requires an authorization token\n//               // 'Access-Control-Allow-Origin': '*', // Allow all origins (CORS)\n//               // 'Access-Control-Allow-Methods': 'POST, GET, OPTIONS', // Methods allowed\n//               // 'Access-Control-Allow-Headers': 'Content-Type, Authorization', // Headers allowed\n//               // // Add any other h\n//             }\n//           }\n//         );\n//         console.log(response.data);\n\n//         setWeatherData(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching weather data:\", error);\n//       }\n//     };\n\n//     // const response = await axios.post('https://api.example.com/weather/interval', {\n//     //   city: location,\n//     //   interval: interval, // Send the interval as part of the data\n//     // });\n//     // // Initial fetch\n//     fetchWeather(location);\n\n//     // Set interval to fetch weather every 5 minutes (300,000 ms)\n//     const intervalId = setInterval(() => {\n//       fetchWeather(location);\n//     }, 300000);\n\n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n\n//   }, [location]);\n//   let cnt=0;\n//   useEffect(() => {\n//     if (weatherData) {\n//       const currentTemp = weatherData.main.temp;\n\n//       if (currentTemp > threshold) {\n//         setConsecutiveAlerts(prev => prev + 1);\n//         cnt=consecutiveAlerts+1;\n//       } else {\n//         setConsecutiveAlerts(0); // Reset if not above threshold\n//         cnt=0;\n//       }\n//       console.log(consecutiveAlerts,cnt);\n//       if (cnt >= 2) {\n//         setAlert(true);\n//       } else {\n//         setAlert(false);\n//       }\n//     }\n//   }, [weatherData, threshold]);\n\n//   const handleLocationChange = () => {\n//     setLocation(inputLocation);\n//     console.log(inputLocation);\n//   };\n\n//   return (\n//     <div className=\"weather-container\">\n//       {weatherData ? (\n//          <div>\n//             <div>\n//               <h2>\n//                 Right now in{\" \"}\n//                 <input\n//                   type=\"text\"\n//                   value={inputLocation}\n//                   onChange={(e) => setInputLocation(e.target.value)}\n//                   id=\"location-input\"\n//                 />\n//                 <button onClick={handleLocationChange} id=\"location-button\">Update</button>\n//                 {\" It's \"}{weatherData.main.description.toLowerCase()}.\n//               </h2>\n//               <div className='data_section'>\n//                 <div className='weather_icon'> \n//                   <img src={`http://openweathermap.org/img/w/${weatherData.main.icon}.png`} alt='Weather Icon' />\n//                 </div>\n//                 <p className='temp'>{`${weatherData.main.temp}°`}</p>\n//                 <div className='wind_humid_section'>\n//                   <p>{`Wind Speed: ${weatherData.main.wind} mph`}</p>\n//                   <p>{`Humidity: ${weatherData.main.humidity}%`}</p>\n//                 </div>\n//               </div>\n\n//               {/* Alert Section */}\n//               <div className={`alert-section ${alert ? 'active' : ''}`}>\n//                 <img\n//                   src={alert ? ringingBellIcon : bellIcon}\n//                   alt=\"Bell Icon\"\n//                   className={`bell-icon ${alert ? 'shaking' : ''}`}\n//                 />\n//                 <span>Threshold: {threshold}°C</span>\n//               </div>\n//             </div>\n\n//             <div>\n//               <WeatherAnalytics location={location}/>\n//            </div>\n//          </div>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Weather;\n\nimport React, { useState, useEffect } from 'react';\nimport \"./WebApp.css\";\nimport bellIcon from \"../img/bell2.png\";\nimport ringingBellIcon from \"../img/bell_ring2.png\";\nimport WeatherAnalytics from \"../components/weatherAnalytics/weatherAnalytics\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = () => {\n  _s();\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState('Delhi');\n  const [inputLocation, setInputLocation] = useState(location);\n  const [alert, setAlert] = useState(false);\n  const [consecutiveAlerts, setConsecutiveAlerts] = useState(1);\n  const [threshold, setThreshold] = useState(30); // Default threshold in Fahrenheit\n\n  useEffect(() => {\n    const fetchWeather = async loc => {\n      try {\n        const response = await axios.post('http://localhost:5000/current-weather', {\n          city: loc\n        }, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(response.data);\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n    fetchWeather(location);\n    const intervalId = setInterval(() => {\n      fetchWeather(location);\n    }, 300000);\n    return () => clearInterval(intervalId);\n  }, [location]);\n  useEffect(() => {\n    if (weatherData) {\n      const currentTemp = weatherData.main.temp;\n      if (currentTemp > threshold) {\n        setConsecutiveAlerts(prev => prev + 1);\n      } else {\n        setConsecutiveAlerts(0); // Reset if not above threshold\n      }\n      if (consecutiveAlerts >= 2) {\n        setAlert(true);\n      } else {\n        setAlert(false);\n      }\n    }\n  }, [weatherData, threshold]);\n  const handleLocationChange = () => {\n    setLocation(inputLocation);\n    console.log(inputLocation);\n  };\n  const handleThresholdChange = e => {\n    const value = e.target.value;\n    if (!isNaN(value) && value !== '') {\n      setThreshold(Number(value));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-container\",\n    children: weatherData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Right now in\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: inputLocation,\n            onChange: e => setInputLocation(e.target.value),\n            id: \"location-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleLocationChange,\n            id: \"location-button\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this), \" It's \", weatherData.main.description.toLowerCase(), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data_section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather_icon\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://openweathermap.org/img/w/${weatherData.main.icon}.png`,\n              alt: \"Weather Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"temp\",\n            children: `${weatherData.main.temp}°`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"wind_humid_section\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: `Wind Speed: ${weatherData.main.wind} mph`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `Humidity: ${weatherData.main.humidity}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `alert-section ${alert ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: alert ? ringingBellIcon : bellIcon,\n            alt: \"Bell Icon\",\n            className: `bell-icon ${alert ? 'shaking' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Threshold: \", threshold, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"threshold-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"threshold\",\n            children: \"Set Threshold (\\xB0C): \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"threshold\",\n            value: threshold,\n            onChange: handleThresholdChange,\n            min: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(WeatherAnalytics, {\n            location: location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(Weather, \"HSn4W2/D32gcvyGDa8FFxd8Gj6Y=\");\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","useEffect","bellIcon","ringingBellIcon","WeatherAnalytics","axios","jsxDEV","_jsxDEV","Weather","_s","weatherData","setWeatherData","location","setLocation","inputLocation","setInputLocation","alert","setAlert","consecutiveAlerts","setConsecutiveAlerts","threshold","setThreshold","fetchWeather","loc","response","post","city","headers","console","log","data","error","intervalId","setInterval","clearInterval","currentTemp","main","temp","prev","handleLocationChange","handleThresholdChange","e","value","target","isNaN","Number","className","children","type","onChange","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","description","toLowerCase","src","icon","alt","wind","humidity","htmlFor","min","_c","$RefreshReg$"],"sources":["D:/Leonidas/Downloads/project0-main/project0-main/frontend/myapp/src/container/WebApp.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import \"./WebApp.css\";\n// import bellIcon from \"../img/bell2.png\";\n// import ringingBellIcon from \"../img/bell_ring2.png\";\n// import WeatherAnalytics from \"../components/weatherAnalytics/weatherAnalytics\"\n// import axios from 'axios'\n\n// const Weather = () => {\n//   const [weatherData, setWeatherData] = useState(null);\n//   const [location, setLocation] = useState('Delhi');\n//   const [inputLocation, setInputLocation] = useState(location);\n//   const [alert, setAlert] = useState(false);\n//   const [consecutiveAlerts, setConsecutiveAlerts] = useState(0);\n//   const [threshold] = useState(50); // Example threshold in Fahrenheit\n\n//   // useEffect(() => {\n//   //   const fetchWeather = async (loc) => {\n//   //     try {\n//   //       // Replace this with an actual API call\n//   //       // const response = await axios.get(\n//   //       //   `https://api.weatherapi.com/v1/current.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${loc}`\n//   //       // );\n//   //       const response = data; // Mock data\n\n//   //       setWeatherData(response);\n//   //     } catch (error) {\n//   //       console.error(\"Error fetching weather data:\", error);\n//   //     }\n//   //   };\n\n//   //   fetchWeather(location);\n//   // }, [location]);\n\n\n//   useEffect(() => {\n//     const fetchWeather = async (loc) => {\n//       try {\n//         const response = await axios.post(\n//           'http://localhost:5000/current-weather', {\n//             city : loc\n//           }, {\n//             headers: {\n//               'Content-Type': 'application/json', // Specify the content type\n//               // 'Authorization': 'Bearer YOUR_TOKEN_HERE', // If your API requires an authorization token\n//               // 'Access-Control-Allow-Origin': '*', // Allow all origins (CORS)\n//               // 'Access-Control-Allow-Methods': 'POST, GET, OPTIONS', // Methods allowed\n//               // 'Access-Control-Allow-Headers': 'Content-Type, Authorization', // Headers allowed\n//               // // Add any other h\n//             }\n//           }\n//         );\n//         console.log(response.data);\n        \n//         setWeatherData(response.data);\n//       } catch (error) {\n//         console.error(\"Error fetching weather data:\", error);\n//       }\n//     };\n  \n\n//     // const response = await axios.post('https://api.example.com/weather/interval', {\n//     //   city: location,\n//     //   interval: interval, // Send the interval as part of the data\n//     // });\n//     // // Initial fetch\n//     fetchWeather(location);\n  \n//     // Set interval to fetch weather every 5 minutes (300,000 ms)\n//     const intervalId = setInterval(() => {\n//       fetchWeather(location);\n//     }, 300000);\n  \n//     // Cleanup interval on component unmount\n//     return () => clearInterval(intervalId);\n  \n//   }, [location]);\n//   let cnt=0;\n//   useEffect(() => {\n//     if (weatherData) {\n//       const currentTemp = weatherData.main.temp;\n\n//       if (currentTemp > threshold) {\n//         setConsecutiveAlerts(prev => prev + 1);\n//         cnt=consecutiveAlerts+1;\n//       } else {\n//         setConsecutiveAlerts(0); // Reset if not above threshold\n//         cnt=0;\n//       }\n//       console.log(consecutiveAlerts,cnt);\n//       if (cnt >= 2) {\n//         setAlert(true);\n//       } else {\n//         setAlert(false);\n//       }\n//     }\n//   }, [weatherData, threshold]);\n\n//   const handleLocationChange = () => {\n//     setLocation(inputLocation);\n//     console.log(inputLocation);\n//   };\n\n//   return (\n//     <div className=\"weather-container\">\n//       {weatherData ? (\n//          <div>\n//             <div>\n//               <h2>\n//                 Right now in{\" \"}\n//                 <input\n//                   type=\"text\"\n//                   value={inputLocation}\n//                   onChange={(e) => setInputLocation(e.target.value)}\n//                   id=\"location-input\"\n//                 />\n//                 <button onClick={handleLocationChange} id=\"location-button\">Update</button>\n//                 {\" It's \"}{weatherData.main.description.toLowerCase()}.\n//               </h2>\n//               <div className='data_section'>\n//                 <div className='weather_icon'> \n//                   <img src={`http://openweathermap.org/img/w/${weatherData.main.icon}.png`} alt='Weather Icon' />\n//                 </div>\n//                 <p className='temp'>{`${weatherData.main.temp}°`}</p>\n//                 <div className='wind_humid_section'>\n//                   <p>{`Wind Speed: ${weatherData.main.wind} mph`}</p>\n//                   <p>{`Humidity: ${weatherData.main.humidity}%`}</p>\n//                 </div>\n//               </div>\n              \n//               {/* Alert Section */}\n//               <div className={`alert-section ${alert ? 'active' : ''}`}>\n//                 <img\n//                   src={alert ? ringingBellIcon : bellIcon}\n//                   alt=\"Bell Icon\"\n//                   className={`bell-icon ${alert ? 'shaking' : ''}`}\n//                 />\n//                 <span>Threshold: {threshold}°C</span>\n//               </div>\n//             </div>\n\n//             <div>\n//               <WeatherAnalytics location={location}/>\n//            </div>\n//          </div>\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Weather;\n\n\n\nimport React, { useState, useEffect } from 'react';\nimport \"./WebApp.css\";\nimport bellIcon from \"../img/bell2.png\";\nimport ringingBellIcon from \"../img/bell_ring2.png\";\nimport WeatherAnalytics from \"../components/weatherAnalytics/weatherAnalytics\";\nimport axios from 'axios';\n\nconst Weather = () => {\n  const [weatherData, setWeatherData] = useState(null);\n  const [location, setLocation] = useState('Delhi');\n  const [inputLocation, setInputLocation] = useState(location);\n  const [alert, setAlert] = useState(false);\n  const [consecutiveAlerts, setConsecutiveAlerts] = useState(1);\n  const [threshold, setThreshold] = useState(30); // Default threshold in Fahrenheit\n\n  useEffect(() => {\n    const fetchWeather = async (loc) => {\n      try {\n        const response = await axios.post(\n          'http://localhost:5000/current-weather', {\n            city: loc\n          }, {\n            headers: {\n              'Content-Type': 'application/json',\n            }\n          }\n        );\n        console.log(response.data);\n        setWeatherData(response.data);\n       \n      } catch (error) {\n        console.error(\"Error fetching weather data:\", error);\n      }\n    };\n\n    fetchWeather(location);\n\n    const intervalId = setInterval(() => {\n      fetchWeather(location);\n    }, 300000);\n\n    return () => clearInterval(intervalId);\n\n  }, [location]);\n\n  useEffect(() => {\n    if (weatherData) {\n      const currentTemp = weatherData.main.temp;\n\n      if (currentTemp > threshold) {\n        setConsecutiveAlerts(prev => prev + 1);\n      } else {\n        setConsecutiveAlerts(0); // Reset if not above threshold\n      }\n\n      if (consecutiveAlerts >= 2) {\n        setAlert(true);\n      } else {\n        setAlert(false);\n      }\n    }\n  }, [weatherData, threshold]);\n\n  const handleLocationChange = () => {\n    setLocation(inputLocation);\n    console.log(inputLocation);\n  };\n\n  const handleThresholdChange = (e) => {\n    const value = e.target.value;\n    if (!isNaN(value) && value !== '') {\n      setThreshold(Number(value));\n    }\n  };\n\n  return (\n    <div className=\"weather-container\">\n      {weatherData ? (\n        <div>\n          <div>\n            <h2>\n              Right now in{\" \"}\n              <input\n                type=\"text\"\n                value={inputLocation}\n                onChange={(e) => setInputLocation(e.target.value)}\n                id=\"location-input\"\n              />\n              <button onClick={handleLocationChange} id=\"location-button\">Update</button>\n              {\" It's \"}{weatherData.main.description.toLowerCase()}.\n            </h2>\n            <div className='data_section'>\n              <div className='weather_icon'> \n                <img src={`http://openweathermap.org/img/w/${weatherData.main.icon}.png`} alt='Weather Icon' />\n              </div>\n              <p className='temp'>{`${weatherData.main.temp}°`}</p>\n              <div className='wind_humid_section'>\n                <p>{`Wind Speed: ${weatherData.main.wind} mph`}</p>\n                <p>{`Humidity: ${weatherData.main.humidity}%`}</p>\n              </div>\n            </div>\n\n            {/* Alert Section */}\n            <div className={`alert-section ${alert ? 'active' : ''}`}>\n              <img\n                src={alert ? ringingBellIcon : bellIcon}\n                alt=\"Bell Icon\"\n                className={`bell-icon ${alert ? 'shaking' : ''}`}\n              />\n              <span>Threshold: {threshold}°C</span>\n            </div>\n\n            {/* Threshold Input */}\n            <div className=\"threshold-input\">\n              <label htmlFor=\"threshold\">Set Threshold (°C): </label>\n              <input\n                type=\"number\"\n                id=\"threshold\"\n                value={threshold}\n                onChange={handleThresholdChange}\n                min=\"0\"\n              />\n            </div>\n\n            <div>\n              <WeatherAnalytics location={location} />\n            </div>\n          </div>\n        </div>\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,gBAAgB,MAAM,iDAAiD;AAC9E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,OAAO,CAAC;EACjD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAACY,QAAQ,CAAC;EAC5D,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}